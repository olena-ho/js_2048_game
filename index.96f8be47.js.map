{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n */ class $a5fd07fa01589658$var$Game {\n    static GAME_STATUS = {\n        IDLE: \"idle\",\n        PLAYING: \"playing\",\n        WIN: \"win\",\n        LOSE: \"lose\"\n    };\n    static ROW_LENGTH = 4;\n    static COL_LENGTH = 4;\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = Array.from({\n        length: 4\n    }, ()=>Array(4).fill(0))){\n        this.status = $a5fd07fa01589658$var$Game.GAME_STATUS.IDLE;\n        this.score = 0;\n        this.initialState = initialState.map((row)=>[\n                ...row\n            ]);\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = $a5fd07fa01589658$var$Game.GAME_STATUS.PLAYING;\n        this.addNewCell();\n        this.addNewCell();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.status = $a5fd07fa01589658$var$Game.GAME_STATUS.IDLE;\n        this.score = 0;\n    }\n    moveLeft() {\n        if (this.status !== $a5fd07fa01589658$var$Game.GAME_STATUS.PLAYING) return;\n        const previousState = this.state.map((row)=>[\n                ...row\n            ]);\n        for(let rowIndex = 0; rowIndex < $a5fd07fa01589658$var$Game.ROW_LENGTH; rowIndex++){\n            let row = this.state[rowIndex].filter((cell)=>cell !== 0);\n            if (row.length === 0) continue;\n            for(let colIndex = 0; colIndex < row.length - 1; colIndex++){\n                if (row[colIndex] === 0) continue;\n                if (row[colIndex] === row[colIndex + 1]) {\n                    row[colIndex] *= 2;\n                    row[colIndex + 1] = 0;\n                    this.score += row[colIndex];\n                }\n            }\n            row = row.filter((cell)=>cell !== 0);\n            while(row.length < $a5fd07fa01589658$var$Game.COL_LENGTH)row.push(0);\n            this.state[rowIndex] = row;\n        }\n        if (!this.statesAreEqual(previousState, this.state)) this.addNewCell();\n        this.checkWinLose();\n    }\n    moveRight() {\n        if (this.status !== $a5fd07fa01589658$var$Game.GAME_STATUS.PLAYING) return;\n        const previousState = this.state.map((row)=>[\n                ...row\n            ]);\n        for(let rowIndex = 0; rowIndex < $a5fd07fa01589658$var$Game.ROW_LENGTH; rowIndex++){\n            let row = this.state[rowIndex].filter((cell)=>cell !== 0);\n            if (row.length === 0) continue;\n            for(let colIndex = row.length - 1; colIndex > 0; colIndex--){\n                if (row[colIndex] === 0) continue;\n                if (row[colIndex] === row[colIndex - 1]) {\n                    row[colIndex] *= 2;\n                    row[colIndex - 1] = 0;\n                    this.score += row[colIndex];\n                }\n            }\n            row = row.filter((cell)=>cell !== 0);\n            while(row.length < $a5fd07fa01589658$var$Game.COL_LENGTH)row.unshift(0);\n            this.state[rowIndex] = row;\n        }\n        if (!this.statesAreEqual(previousState, this.state)) this.addNewCell();\n        this.checkWinLose();\n    }\n    moveUp() {\n        if (this.status !== $a5fd07fa01589658$var$Game.GAME_STATUS.PLAYING) return;\n        const previousState = this.state.map((row)=>[\n                ...row\n            ]);\n        for(let colIndex = 0; colIndex < $a5fd07fa01589658$var$Game.COL_LENGTH; colIndex++){\n            let column = [];\n            for(let rowIndex = 0; rowIndex < $a5fd07fa01589658$var$Game.ROW_LENGTH; rowIndex++)if (this.state[rowIndex][colIndex] !== 0) column.push(this.state[rowIndex][colIndex]);\n            for(let i = 0; i < column.length - 1; i++){\n                if (column[i] === 0) continue;\n                if (column[i] === column[i + 1]) {\n                    column[i] *= 2;\n                    column[i + 1] = 0;\n                    this.score += column[i];\n                }\n            }\n            column = column.filter((cell)=>cell !== 0);\n            while(column.length < $a5fd07fa01589658$var$Game.ROW_LENGTH)column.push(0);\n            for(let rowIndex = 0; rowIndex < $a5fd07fa01589658$var$Game.ROW_LENGTH; rowIndex++)this.state[rowIndex][colIndex] = column[rowIndex];\n        }\n        if (!this.statesAreEqual(previousState, this.state)) this.addNewCell();\n        this.checkWinLose();\n    }\n    moveDown() {\n        if (this.status !== $a5fd07fa01589658$var$Game.GAME_STATUS.PLAYING) return;\n        const previousState = this.state.map((row)=>[\n                ...row\n            ]);\n        for(let colIndex = 0; colIndex < $a5fd07fa01589658$var$Game.COL_LENGTH; colIndex++){\n            let column = [];\n            for(let rowIndex = 0; rowIndex < $a5fd07fa01589658$var$Game.ROW_LENGTH; rowIndex++)if (this.state[rowIndex][colIndex] !== 0) column.push(this.state[rowIndex][colIndex]);\n            for(let i = column.length - 1; i > 0; i--){\n                if (column[i] === 0) continue;\n                if (column[i] === column[i - 1]) {\n                    column[i] *= 2;\n                    column[i - 1] = 0;\n                    this.score += column[i];\n                }\n            }\n            column = column.filter((cell)=>cell !== 0);\n            while(column.length < $a5fd07fa01589658$var$Game.ROW_LENGTH)column.unshift(0);\n            for(let rowIndex = 0; rowIndex < $a5fd07fa01589658$var$Game.ROW_LENGTH; rowIndex++)this.state[rowIndex][colIndex] = column[rowIndex];\n        }\n        if (!this.statesAreEqual(previousState, this.state)) this.addNewCell();\n        this.checkWinLose();\n    }\n    statesAreEqual(state1, state2) {\n        return state1.flat().join() === state2.flat().join();\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    addNewCell() {\n        const emptyCells = [];\n        this.state.forEach((row, rowIndex)=>{\n            row.forEach((cell, cellIndex)=>{\n                if (cell === 0) emptyCells.push([\n                    rowIndex,\n                    cellIndex\n                ]);\n            });\n        });\n        const [r, c] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        this.state[r][c] = Math.random() < 0.9 ? 2 : 4;\n    }\n    checkWinLose() {\n        if (this.state.flat().includes(2048)) this.status = $a5fd07fa01589658$var$Game.GAME_STATUS.WIN;\n        else if (!this.state.flat().includes(0) && !this.checkMergePossible()) this.status = $a5fd07fa01589658$var$Game.GAME_STATUS.LOSE;\n    }\n    checkMergePossible() {\n        for(let rowIndex = 0; rowIndex < $a5fd07fa01589658$var$Game.ROW_LENGTH; rowIndex++)for(let colIndex = 0; colIndex < $a5fd07fa01589658$var$Game.COL_LENGTH; colIndex++){\n            if (colIndex < $a5fd07fa01589658$var$Game.COL_LENGTH - 1 && this.state[rowIndex][colIndex] === this.state[rowIndex][colIndex + 1]) return true;\n            if (rowIndex < $a5fd07fa01589658$var$Game.ROW_LENGTH - 1 && this.state[rowIndex][colIndex] === this.state[rowIndex + 1][colIndex]) return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startBtn = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$startMsg = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$scoreEl = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$winMsg = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$loseMsg = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$cellNodes = document.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$cells = [\n    ...$09e991522ca7e64e$var$cellNodes\n];\nconst $09e991522ca7e64e$var$updateCells = ()=>{\n    $09e991522ca7e64e$var$cells.forEach((cell, index)=>{\n        const rowIndex = Math.floor(index / $a5fd07fa01589658$exports.COL_LENGTH);\n        const colIndex = index % $a5fd07fa01589658$exports.COL_LENGTH;\n        const cellValue = $09e991522ca7e64e$var$game.state[rowIndex][colIndex];\n        cell.textContent = cellValue || \"\";\n        cell.className = \"field-cell\";\n        if (cellValue) cell.classList.add(`field-cell--${cellValue}`);\n    });\n    $09e991522ca7e64e$var$scoreEl.textContent = $09e991522ca7e64e$var$game.getScore();\n};\nconst $09e991522ca7e64e$var$handleArrowPress = (e)=>{\n    switch(e.key){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        default:\n            break;\n    }\n    $09e991522ca7e64e$var$updateCells();\n    if ($09e991522ca7e64e$var$game.status === $a5fd07fa01589658$exports.GAME_STATUS.WIN) $09e991522ca7e64e$var$winMsg.classList.remove(\"hidden\");\n    else if ($09e991522ca7e64e$var$game.status === $a5fd07fa01589658$exports.GAME_STATUS.LOSE) $09e991522ca7e64e$var$loseMsg.classList.remove(\"hidden\");\n};\nconst $09e991522ca7e64e$var$handleStart = ()=>{\n    if ($09e991522ca7e64e$var$game.status === $a5fd07fa01589658$exports.GAME_STATUS.IDLE) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startBtn.textContent = \"Restart\";\n        $09e991522ca7e64e$var$startBtn.classList.add(\"restart\");\n        $09e991522ca7e64e$var$startBtn.classList.remove(\"start\");\n        $09e991522ca7e64e$var$startMsg.classList.add(\"hidden\");\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$startBtn.textContent = \"Start\";\n        $09e991522ca7e64e$var$loseMsg.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$winMsg.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$startBtn.classList.add(\"start\");\n        $09e991522ca7e64e$var$startBtn.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$startMsg.classList.remove(\"hidden\");\n    }\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleArrowPress);\n    $09e991522ca7e64e$var$updateCells();\n    if ($09e991522ca7e64e$var$game.status !== $a5fd07fa01589658$exports.GAME_STATUS.PLAYING) document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleArrowPress);\n};\n$09e991522ca7e64e$var$startBtn.addEventListener(\"click\", $09e991522ca7e64e$var$handleStart);\n\n\n//# sourceMappingURL=index.96f8be47.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startBtn = document.querySelector('.start');\nconst startMsg = document.querySelector('.message-start');\nconst scoreEl = document.querySelector('.game-score');\nconst winMsg = document.querySelector('.message-win');\nconst loseMsg = document.querySelector('.message-lose');\nconst cellNodes = document.querySelectorAll('.field-cell');\nconst cells = [...cellNodes];\n\nconst updateCells = () => {\n  cells.forEach((cell, index) => {\n    const rowIndex = Math.floor(index / Game.COL_LENGTH);\n    const colIndex = index % Game.COL_LENGTH;\n    const cellValue = game.state[rowIndex][colIndex];\n\n    cell.textContent = cellValue || '';\n    cell.className = 'field-cell';\n\n    if (cellValue) {\n      cell.classList.add(`field-cell--${cellValue}`);\n    }\n  });\n\n  scoreEl.textContent = game.getScore();\n};\n\nconst handleArrowPress = (e) => {\n  switch (e.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    default:\n      break;\n  }\n\n  updateCells();\n\n  if (game.status === Game.GAME_STATUS.WIN) {\n    winMsg.classList.remove('hidden');\n  } else if (game.status === Game.GAME_STATUS.LOSE) {\n    loseMsg.classList.remove('hidden');\n  }\n};\n\nconst handleStart = () => {\n  if (game.status === Game.GAME_STATUS.IDLE) {\n    game.start();\n    startBtn.textContent = 'Restart';\n    startBtn.classList.add('restart');\n    startBtn.classList.remove('start');\n    startMsg.classList.add('hidden');\n  } else {\n    game.restart();\n    startBtn.textContent = 'Start';\n    loseMsg.classList.add('hidden');\n    winMsg.classList.add('hidden');\n    startBtn.classList.add('start');\n    startBtn.classList.remove('restart');\n    startMsg.classList.remove('hidden');\n  }\n\n  document.addEventListener('keydown', handleArrowPress);\n\n  updateCells();\n\n  if (game.status !== Game.GAME_STATUS.PLAYING) {\n    document.removeEventListener('keydown', handleArrowPress);\n  }\n};\n\nstartBtn.addEventListener('click', handleStart);\n","'use strict';\n\n/**\n * This class represents the game.\n */\nclass Game {\n  static GAME_STATUS = {\n    IDLE: 'idle',\n    PLAYING: 'playing',\n    WIN: 'win',\n    LOSE: 'lose',\n  };\n\n  static ROW_LENGTH = 4;\n  static COL_LENGTH = 4;\n\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = Array.from({ length: 4 }, () => Array(4).fill(0)),\n  ) {\n    this.status = Game.GAME_STATUS.IDLE;\n    this.score = 0;\n    this.initialState = initialState.map((row) => [...row]);\n    this.state = this.initialState.map((row) => [...row]);\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = Game.GAME_STATUS.PLAYING;\n    this.addNewCell();\n    this.addNewCell();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = this.initialState.map((row) => [...row]);\n    this.status = Game.GAME_STATUS.IDLE;\n    this.score = 0;\n  }\n\n  moveLeft() {\n    if (this.status !== Game.GAME_STATUS.PLAYING) {\n      return;\n    }\n\n    const previousState = this.state.map((row) => [...row]);\n\n    for (let rowIndex = 0; rowIndex < Game.ROW_LENGTH; rowIndex++) {\n      let row = this.state[rowIndex].filter((cell) => cell !== 0);\n\n      if (row.length === 0) {\n        continue;\n      }\n\n      for (let colIndex = 0; colIndex < row.length - 1; colIndex++) {\n        if (row[colIndex] === 0) {\n          continue;\n        }\n\n        if (row[colIndex] === row[colIndex + 1]) {\n          row[colIndex] *= 2;\n          row[colIndex + 1] = 0;\n          this.score += row[colIndex];\n        }\n      }\n\n      row = row.filter((cell) => cell !== 0);\n\n      while (row.length < Game.COL_LENGTH) {\n        row.push(0);\n      }\n\n      this.state[rowIndex] = row;\n    }\n\n    if (!this.statesAreEqual(previousState, this.state)) {\n      this.addNewCell();\n    }\n\n    this.checkWinLose();\n  }\n\n  moveRight() {\n    if (this.status !== Game.GAME_STATUS.PLAYING) {\n      return;\n    }\n\n    const previousState = this.state.map((row) => [...row]);\n\n    for (let rowIndex = 0; rowIndex < Game.ROW_LENGTH; rowIndex++) {\n      let row = this.state[rowIndex].filter((cell) => cell !== 0);\n\n      if (row.length === 0) {\n        continue;\n      }\n\n      for (let colIndex = row.length - 1; colIndex > 0; colIndex--) {\n        if (row[colIndex] === 0) {\n          continue;\n        }\n\n        if (row[colIndex] === row[colIndex - 1]) {\n          row[colIndex] *= 2;\n          row[colIndex - 1] = 0;\n          this.score += row[colIndex];\n        }\n      }\n\n      row = row.filter((cell) => cell !== 0);\n\n      while (row.length < Game.COL_LENGTH) {\n        row.unshift(0);\n      }\n\n      this.state[rowIndex] = row;\n    }\n\n    if (!this.statesAreEqual(previousState, this.state)) {\n      this.addNewCell();\n    }\n\n    this.checkWinLose();\n  }\n\n  moveUp() {\n    if (this.status !== Game.GAME_STATUS.PLAYING) {\n      return;\n    }\n\n    const previousState = this.state.map((row) => [...row]);\n\n    for (let colIndex = 0; colIndex < Game.COL_LENGTH; colIndex++) {\n      let column = [];\n\n      for (let rowIndex = 0; rowIndex < Game.ROW_LENGTH; rowIndex++) {\n        if (this.state[rowIndex][colIndex] !== 0) {\n          column.push(this.state[rowIndex][colIndex]);\n        }\n      }\n\n      for (let i = 0; i < column.length - 1; i++) {\n        if (column[i] === 0) {\n          continue;\n        }\n\n        if (column[i] === column[i + 1]) {\n          column[i] *= 2;\n          column[i + 1] = 0;\n          this.score += column[i];\n        }\n      }\n\n      column = column.filter((cell) => cell !== 0);\n\n      while (column.length < Game.ROW_LENGTH) {\n        column.push(0);\n      }\n\n      for (let rowIndex = 0; rowIndex < Game.ROW_LENGTH; rowIndex++) {\n        this.state[rowIndex][colIndex] = column[rowIndex];\n      }\n    }\n\n    if (!this.statesAreEqual(previousState, this.state)) {\n      this.addNewCell();\n    }\n\n    this.checkWinLose();\n  }\n\n  moveDown() {\n    if (this.status !== Game.GAME_STATUS.PLAYING) {\n      return;\n    }\n\n    const previousState = this.state.map((row) => [...row]);\n\n    for (let colIndex = 0; colIndex < Game.COL_LENGTH; colIndex++) {\n      let column = [];\n\n      for (let rowIndex = 0; rowIndex < Game.ROW_LENGTH; rowIndex++) {\n        if (this.state[rowIndex][colIndex] !== 0) {\n          column.push(this.state[rowIndex][colIndex]);\n        }\n      }\n\n      for (let i = column.length - 1; i > 0; i--) {\n        if (column[i] === 0) {\n          continue;\n        }\n\n        if (column[i] === column[i - 1]) {\n          column[i] *= 2;\n          column[i - 1] = 0;\n          this.score += column[i];\n        }\n      }\n\n      column = column.filter((cell) => cell !== 0);\n\n      while (column.length < Game.ROW_LENGTH) {\n        column.unshift(0);\n      }\n\n      for (let rowIndex = 0; rowIndex < Game.ROW_LENGTH; rowIndex++) {\n        this.state[rowIndex][colIndex] = column[rowIndex];\n      }\n    }\n\n    if (!this.statesAreEqual(previousState, this.state)) {\n      this.addNewCell();\n    }\n\n    this.checkWinLose();\n  }\n\n  statesAreEqual(state1, state2) {\n    return state1.flat().join() === state2.flat().join();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  addNewCell() {\n    const emptyCells = [];\n\n    this.state.forEach((row, rowIndex) => {\n      row.forEach((cell, cellIndex) => {\n        if (cell === 0) {\n          emptyCells.push([rowIndex, cellIndex]);\n        }\n      });\n    });\n\n    const [r, c] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.state[r][c] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  checkWinLose() {\n    if (this.state.flat().includes(2048)) {\n      this.status = Game.GAME_STATUS.WIN;\n    } else if (!this.state.flat().includes(0) && !this.checkMergePossible()) {\n      this.status = Game.GAME_STATUS.LOSE;\n    }\n  }\n\n  checkMergePossible() {\n    for (let rowIndex = 0; rowIndex < Game.ROW_LENGTH; rowIndex++) {\n      for (let colIndex = 0; colIndex < Game.COL_LENGTH; colIndex++) {\n        if (\n          colIndex < Game.COL_LENGTH - 1 &&\n          this.state[rowIndex][colIndex] === this.state[rowIndex][colIndex + 1]\n        ) {\n          return true;\n        }\n\n        if (\n          rowIndex < Game.ROW_LENGTH - 1 &&\n          this.state[rowIndex][colIndex] === this.state[rowIndex + 1][colIndex]\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","GAME_STATUS","IDLE","PLAYING","WIN","LOSE","ROW_LENGTH","COL_LENGTH","constructor","initialState","Array","from","length","fill","status","score","map","row","state","start","addNewCell","restart","moveLeft","previousState","rowIndex","filter","cell","colIndex","push","statesAreEqual","checkWinLose","moveRight","unshift","moveUp","column","i","moveDown","state1","state2","flat","join","getScore","getState","getStatus","emptyCells","forEach","cellIndex","r","c","Math","floor","random","includes","checkMergePossible","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$startBtn","document","querySelector","$09e991522ca7e64e$var$startMsg","$09e991522ca7e64e$var$scoreEl","$09e991522ca7e64e$var$winMsg","$09e991522ca7e64e$var$loseMsg","$09e991522ca7e64e$var$cells","querySelectorAll","$09e991522ca7e64e$var$updateCells","index","cellValue","textContent","className","classList","add","$09e991522ca7e64e$var$handleArrowPress","e","key","remove","addEventListener","removeEventListener"],"version":3,"file":"index.96f8be47.js.map"}